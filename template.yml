AWSTemplateFormatVersion: 2010-09-09
Description: zendesk-ticket-generator

Transform:
- AWS::Serverless-2016-10-31

Metadata:
  AWS::ServerlessRepo::Application:
    Name: Zendesk-Ticket-Generator
    Description: This application uses a Lambda function on a schedule to run every minute and make a random ticket in Zendesk based on a switch statement. It's made for populating demos and tests with tickets.
    Author: Joe Norman
    SpdxLicenseId: MIT-0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['zendesk', 'ticket']
    HomePageUrl: https://github.com/joe-norman/zendesk-ticket-generator
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/joe-norman/zendesk-ticket-generator


Parameters:
#######################################################
# Lambda Environment Variables
#######################################################
  ZendeskDomain:
    Description: Your Zendesk domain, without the 'https://' or '.com'. Example - mydomain.zendesk
    Type: String
    Default: ''
  ZendeskUserEmail:
    Description: Email address of the agent that will be making the API calls. Probably should be a service account. Must exist in your Zendesk tenant with appropriate rights.
    Type: String
    Default: ''
  ZendeskAPIKey:
    Description: API key generated in the Zendesk admin console. The Lambda function will use this to make API calls to make Zendesk tickets.
    Type: String
    Default: ''



Resources:
#######################################################
# Lambda Functions
#######################################################  
  ZendeskTicketGenerator:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that creates a bulk of fake Zendesk tickets fairly quickly for demos or testing
      Runtime: nodejs10.x
      Handler: ticketCreator.handler
      CodeUri: src/ticketCreator
      Events:
        CloudWatchEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
      MemorySize: 128
      Timeout: 100
      Role:
          Fn::GetAtt:
            - ZendeskTicketGeneratorLambdaExecutionRole
            - Arn
      Environment:
        Variables:
          ZendeskDomain: !Ref ZendeskDomain
          ZendeskUserEmail: !Ref ZendeskUserEmail
          ZendeskAPIKey: !Ref ZendeskAPIKey
  
##########################################################################
#   Roles                                                                #
##########################################################################   
  ZendeskTicketGeneratorLambdaExecutionRole:
      Description: Creating service role in IAM for AWS Lambda
      Type: AWS::IAM::Role
      Properties:
        RoleName: 'ZendeskTicketGeneratorLambdaExecutionRole'
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
        ManagedPolicyArns:
          - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'